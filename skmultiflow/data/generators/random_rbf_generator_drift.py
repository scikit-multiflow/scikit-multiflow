__author__ = 'Guilherme Matsumoto'

from skmultiflow.data.generators.random_rbf_generator import RandomRBFGenerator
from skmultiflow.core.base_object import BaseObject
import numpy as np


class RandomRBFGeneratorDrift(RandomRBFGenerator, BaseObject):
    """ RandomRBFGeneratorDrift
    
    This class is an extension from the RandomRBFGenerator. It functions 
    as the parent class, except that drift can be introduced in objects 
    of this class. 
    
    The drift is created by adding a speed to certain centroids. As the 
    samples are generated each of the moving centroids' centers is 
    changed by an amount determined by its speed.
    
    Parameters
    ----------
    model_seed: int (Default: 21)
        The seed to be used by the model random generator.
        
    instance_seed: int (Default: 5)
        The seed to be used by the instance random generator.
        
    num_classes: int (Default: 2)
        The number of class labels to generate.
        
    num_att: int (Default: 10)
        The total number of attributes to generate.
        
    num_centroids: int (Default: 50)
        The total number of centroids to generate.
        
    change_speed: float (Default: 0.0)
        The concept drift speed.
        
    num_drift_centroids: int (Default: 50)
        The number of centroids that will drift.
        
    Examples
    --------
    opt = FileOption('FILE', 'OPT_NAME', '../datasets/covtype.csv', 'csv', False)
    stream = FileStream(opt, -1, 1)
    stream.prepare_for_use()
    rbf_drift = RandomRBFGeneratorDrift(change_speed=41.00, num_centroids=50, model_seed=32523423, instance_seed=5435,
                                     num_classes=2, num_att=10, num_drift_centroids=50)
    rbf_drift.prepare_for_use()
          
    """
    def __init__(self, model_seed=21, instance_seed=5, num_classes=2, num_att=10, num_centroids=50,
                 change_speed=0.0, num_drift_centroids=50):
        super().__init__(model_seed, instance_seed, num_classes, num_att, num_centroids)
        #default values
        self.change_speed = change_speed
        self.num_drift_centroids = num_drift_centroids
        self.centroid_speed = None

    def next_instance(self, batch_size=1):
        """ next_instance
        
        Return batch_size samples generated by choosing a centroid at 
        random and randomly offsetting its attributes so that it is 
        placed inside the hypersphere of that centroid.
        
        In addition to that, drift is introduced to a chosen number of 
        centroids. Each chosen center is moved at each generated sample.
        
        Parameters
        ----------
        batch_size: int
            The number of samples to return.
        
        Returns
        -------
        Return a tuple with the features matrix and the labels matrix for 
        the batch_size samples that were requested. 
        
        """
        data = np.zeros([batch_size, self.num_numerical_attributes + 1])
        for k in range(batch_size):
            len = self.num_drift_centroids
            if (len > self.num_centroids):
                len = self.num_centroids

            for i in range(len):
                for j in range(self.num_numerical_attributes):
                    self.centroids[i].centre[j] += self.centroid_speed[i][j] * self.change_speed

                    if ((self.centroids[i].centre[j] > 1) | (self.centroids[i].centre[j] < 0)):
                        self.centroids[i].centre[j] = 1 if (self.centroids[i].centre[j] > 1) else 0
                        self.centroid_speed[i][j] = -self.centroid_speed[i][j]
            X, y = super().next_instance(1)
            data[k, :] = np.concatenate((X[0], y[0]))

        return (data[:, :self.num_numerical_attributes], data[:, self.num_numerical_attributes:].flatten())

    def generate_centroids(self):
        """ generate_centroids
        
        The centroids are generated just as it's done in the parent class, 
        the difference is the extra step taken to setup the drift, if there's 
        any.
        
        To configure the drift, random offset speeds are chosen for 
        self.num_drift_centroids centroids. Finally, the speed are 
        normalized.
        
        """
        super().generate_centroids()
        model_random = np.random
        model_random.seed(self.model_seed)
        len = self.num_drift_centroids
        self.centroid_speed = []
        if (len > self.num_centroids):
            len = self.num_centroids

        for i in range(len):
            rand_speed = []
            norm_speed = 0.0

            for j in range(self.num_numerical_attributes):
                rand_speed.append(model_random.rand())
                norm_speed += rand_speed[j]*rand_speed[j]

            norm_speed = np.sqrt(norm_speed)

            for j in range(self.num_numerical_attributes):
                rand_speed[j] /= norm_speed

            self.centroid_speed.append(rand_speed)

    def prepare_for_use(self):
        self.restart()

    def restart(self):
        self.generate_centroids()
        self.instance_random.seed(self.instance_seed)

    def get_info(self):
        return 'RandomRBFGenerator: model_seed: ' + str(self.model_seed) + ' - instance_seed: ' + \
               str(self.instance_seed) + ' - num_classes: ' + str(self.num_classes) + ' - num_att: ' \
               + str(self.num_numerical_attributes) + ' - num_centroids: ' + str(self.num_centroids) + \
               ' - change_speed: ' + str(self.change_speed) + ' - num_drift_centroids: ' + str(self.num_drift_centroids)

    def get_num_targeting_tasks(self):
        return 1

if __name__ == '__main__':
    stream = RandomRBFGeneratorDrift(change_speed=0.02, num_drift_centroids=50)
    stream.prepare_for_use()

    X, y = stream.next_instance(4)
    print(X)
    print(y)