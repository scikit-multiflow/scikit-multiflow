import numpy as np
from skmultiflow.data.base_stream import Stream
from skmultiflow.core.utils.validation import check_random_state


class STAGGERGenerator(Stream):

    """ StaggerGenerator

    This generator is an implementation of the dara stream with abrupt
    concept drift, as described in Gama, Joao, et al.'s 'Learning with drift
    detection.' Advances in artificial intelligenceâ€“SBIA 2004. Springer Berlin
    Heidelberg, 2004. 286-295."

    It generates 3 boolean attributes (size, color, shape), that vary from 0 to 2.
    Size: Small, medium, large.
    Color: Blue, red, green.
    Shape: Circle, square, triangle.
    A classification function is chosen among three possible ones:

        0- Function that return 1 if the size is small and the color is red.
        1- Function that return 1 if the color is green or the shape is a circle.
        2- Function that return 1 if the size is medium or large
    Concept drift is possible if used in conjunction with the concept
    drift generator, that at the time of this framework's first release
    is not yet implemented. The abrupt drift is generated by changing
    the classification function, thus changing the threshold.

    One important feature is the possibility to balance classes, which
    means the class distribution will tend to a uniform one.

    Parameters
    ----------
    classification_function: int (Default: 0)
        Which of the four classification functions to use for the generation.
        The value can vary from 0 to 3.

    sample_seed: int (Default: None)
        The seed used to initialize the random generator, which is an instance
        of numpy's random.

    balance_classes: bool (Default: False)
        Whether to balance classes or not. If balanced, the class distribution
        will converge to a uniform distribution.

    Notes
    -----
    Concept drift is not yet available, since the support class that adds
    the drift is not yet implemented.

        Examples
    --------
    >>> # Imports
    >>> from skmultiflow.data.generators.stagger_generator import STAGGERGenerator
    >>> # Setting up the stream
    >>> stream = STAGGERGenerator(classification_function = 2, sample_seed = 112, balance_classes = False)
    >>> stream.prepare_for_use()
    >>> # Retrieving one sample
    >>> stream.next_sample()
    (array([[0., 0., 2.]]), array([0.]))
    >>> stream.next_sample(10)
    (array([[1., 0., 1.],
       [0., 0., 0.],
       [1., 2., 0.],
       [1., 0., 2.],
       [0., 2., 1.],
       [0., 1., 2.],
       [0., 1., 1.],
       [0., 1., 2.],
       [1., 2., 2.],
       [1., 2., 0.]]), array([1., 0., 1., 1., 0., 0., 0., 0., 1., 1.]))
    >>> stream.n_remaining_samples()
    -1
    >>> stream.has_more_samples()
    True

    """

    def __init__(self, classification_function=0, sample_seed=None, balance_classes=False):
        super().__init__()

        # Classification functions to use
        self.classification_functions = [self.classification_function_zero, self.classification_function_one,
                                         self.classification_function_two]

        self.classification_function_idx = classification_function
        self.sample_seed = sample_seed
        self.balance_classes = balance_classes
        self.n_num_features = 3
        self.n_classes = 2
        self.n_targets = 1
        self.sample_random = None
        self.next_class_should_be_zero = False

        self.__configure()

    def __configure(self):
        self.sample_random = None
        self.sample_random = check_random_state(self.sample_seed)
        self.next_class_should_be_zero = False
        self.outputs_labels = ["class"]
        self.features_labels = ["size", "color", "shape"]
        self.size_labels = ["small", "medium", "large"]
        self.color_labels = ["red", "blue", "green"]
        self.shape_labels = ["circle", "square", "triangle"]

    def n_remaining_samples(self):
        return -1

    def has_more_samples(self):
        return True

    def next_sample(self, batch_size=1):

        """ next_sample

                The sample generation works as follows: The three attributes are
                generated with the random int generator, initialized with the seed
                passed by the user. Then, the classification function decides whether
                to classify the instance as class 0 or class 1. The next step is to
                verify if the classes should be balanced, and if so, balance the
                classes.

                The generated sample will have  relevant features and 1 label (it has one classification task).

                Parameters
                ----------
                batch_size: int
                    The number of samples to return.

                Returns
                -------
                tuple or tuple list
                    Return a tuple with the features matrix and the labels matrix for
                    the batch_size samples that were requested.

                """
        data = np.zeros([batch_size, self.n_num_features + 1])

        for j in range(batch_size):
            size = color = shape = 0
            group = 0
            desired_class_found = False
            while not desired_class_found:
                size = self.sample_random.randint(2)
                color = self.sample_random.randint(2)
                shape = self.sample_random.randint(2)

                group = self.classification_functions[self.classification_function_idx](size, color, shape)

                if not self.balance_classes:
                    desired_class_found = True
                else:
                    if (self.next_class_should_be_zero and (group == 0)) or \
                            ((not self.next_class_should_be_zero) and (group == 1)):
                        desired_class_found = True
                        self.next_class_should_be_zero = not self.next_class_should_be_zero

            data[j, 0] = size
            data[j, 1] = color
            data[j, 2] = shape
            data[j, 3] = group

        self.current_sample_x = data[:, :self.n_num_features]
        self.current_sample_y = data[:, self.n_num_features:].flatten()

        return self.current_sample_x, self.current_sample_y

    def prepare_for_use(self):
        self.restart()

    def is_restartable(self):
        return True

    def restart(self):
        self.sample_random.seed(self.sample_seed)
        self.next_class_should_be_zero = False

    def get_n_cat_features(self):
        return self.n_cat_features

    def get_n_num_features(self):
        return self.n_num_features

    def get_n_features(self):
        return self.n_num_features

    def get_n_targets(self):
        return self.n_targets

    def get_feature_names(self):
        return self.features_labels

    def get_target_names(self):
        return self.outputs_labels

    def last_sample(self):
        return self.current_sample_x, self.current_sample_y

    @staticmethod
    def classification_function_zero(size, color, shape):
        """ classification_function_zero

               Decides the sample class label as positive if the color is red and
               size is small.

               Parameters
               ----------
               size: int
                   First numeric attribute.

               color: int
                   Second boolean attribute.

               shape: int
                   Third boolean attribute

               Returns
               -------
               int
                   Returns the sample class label, either 0 or 1.

               """
        return 1 if (size == 0 and color == 0) else 0

    @staticmethod
    def classification_function_one(size, color, shape):
        """ classification_function_one

                Decides the sample class label as positive if the color is green or
                shape is a cricle.

                Parameters
                ----------
                size: int
                    First numeric attribute.

                color: int
                    Second boolean attribute.

                shape: int
                    Third boolean attribute

                Returns
                -------
                int
                    Returns the sample class label, either 0 or 1.

                """
        return 1 if (color == 2 or shape == 0) else 0

    @staticmethod
    def classification_function_two(size, color, shape):
        """ classification_function_two

        Decides the sample class label as positive if the size is medium or
        large.

        Parameters
        ----------
        size: int
            First numeric attribute.

        color: int
            Second boolean attribute.

        shape: int
            Third boolean attribute

        Returns
        -------
        int
            Returns the sample class label, either 0 or 1.

        """
        return 1 if (size == 1 or size == 2) else 0

    def get_name(self):
        return "Sine Generator - {} target, {} classes".format(self.n_targets, self.n_classes)

    def get_targets(self):
        return [i for i in range(self.n_classes)]

    def get_info(self):
        return 'SineGenerator: classification_function: ' + str(self.classification_function_idx) + \
               ' - sample_seed: ' + str(self.sample_seed) + \
               ' - balance_classes: ' + ('True' if self.balance_classes else 'False')

    def generate_drift(self):
        new_function = self.sample_random.randint(3)
        while new_function == self.classification_function_idx:
            new_function = self.sample_random.randint(3)
        self.classification_function_idx = new_function
