from sklearn.datasets import make_regression
from skmultiflow.meta.regressor_chains import RegressorChain
from sklearn.linear_model import SGDRegressor
from skmultiflow.data import DataStream
import numpy as np


def test_regressor_chains():
    X_reg, y_reg = make_regression(random_state=112, n_targets=5, n_samples=10000)
    stream = DataStream(X_reg, y_reg)
    stream.prepare_for_use()
    estimator = SGDRegressor(random_state=112)
    learner = RegressorChain(base_estimator=estimator, random_state=112)

    X, y = stream.next_sample(150)
    learner.partial_fit(X, y)

    cnt = 0
    max_samples = 5000
    predictions = []
    true_labels = []
    wait_samples = 100

    while cnt < max_samples:
        X, y = stream.next_sample()
        # Test every n samples
        if (cnt % wait_samples == 0) and (cnt != 0):
            predictions.append(learner.predict(X)[0])
            true_labels.append(y[0])

        learner.partial_fit(X, y)
        cnt += 1

    expected_predictions = [[9.04634393e+01, -7.82383526e+12,  1.67164761e+24,  2.10403825e+35, -5.76486048e+46],
                            [7.38996131e+00,  1.04146751e+12,  3.84402492e+23, -3.83934901e+35, 2.60493677e+47],
                            [-1.69179427e+02, -4.47064512e+13, -6.27943719e+24,  6.75856935e+35, -2.35357897e+47],
                            [-1.63380388e+02,  7.04445951e+12,  1.30506078e+24, -3.39218215e+35, -1.31464456e+47],
                            [3.78150133e+02, -7.06114105e+13, -5.90431159e+24,  2.36186287e+36, 2.92404362e+46],
                            [-5.14535875e+01, -9.25854580e+12,  3.27271612e+24,  4.69253466e+35, 2.02066610e+47],
                            [-9.17002872e+01,  8.71934386e+12,  9.76770730e+23, -2.34022622e+35, 1.22848476e+47],
                            [1.29306228e+02, -6.47507618e+13,  1.67892748e+25, -8.58313527e+36, -1.07284923e+48],
                            [-2.82731835e+02,  1.10987818e+12, -1.29193242e+23, -8.04906836e+33, -5.27564295e+43],
                            [-8.59898894e+01, -1.78860327e+12, -8.94967718e+23, -7.72328849e+3, -2.71574632e+46],
                            [2.51618726e+02,  2.08754837e+13, -1.55743565e+25, -7.11465980e+36, -3.66917916e+48],
                            [-3.92718343e+01,  1.85181397e+12, -3.09740895e+23,  1.35745220e+35, 3.24607219e+46],
                            [2.10973431e+01, -6.60839074e+12,  1.03102552e+24,  1.43692806e+35, 4.79293074e+46],
                            [-3.10092981e+02,  1.69954909e+13,  4.32033201e+24,  2.63918250e+36, 5.37168454e+47],
                            [1.46911055e+02,  4.84496468e+12, -3.83722102e+23, -9.34024420e+34, -5.18684472e+45],
                            [-1.47975926e+02, -1.58913765e+13, -2.40975939e+24,  5.95708669e+35, -1.33282696e+47],
                            [1.30493387e+02,  1.21251446e+13,  3.02421442e+24, -1.35019910e+35, -1.45641931e+46],
                            [-2.50621901e+02, -2.46739798e+13, -3.45030098e+24, 1.17575735e+36, -2.96147617e+45],
                            [1.17688801e+02, -3.94191373e+13,  7.92219475e+23,  2.71730982e+35, -2.29860987e+47],
                            [2.23582511e+02,  1.84704283e+13,  1.82409742e+23, 5.30670703e+34, -8.88082396e+44],
                            [-9.49257785e+01, -8.66997160e+12, -3.99443297e+24, 1.21797313e+36, 2.45669600e+47],
                            [-2.14969475e+01, -5.02690190e+12, -2.36026051e+24,  4.75352907e+35, 3.27818199e+47],
                            [1.02882608e+02, -1.11645510e+12, -7.60544107e+22, 8.28341774e+33, 6.73860436e+44],
                            [1.60393786e+02, -2.41409443e+13,  3.28360511e+24, -2.93727445e+35, 6.13065601e+46],
                            [1.33649760e+02, -9.99016348e+12,  9.70286535e+22,  4.61933272e+34, 3.56565486e+45],
                            [7.58698562e+01,  1.50705549e+13,  9.49100439e+23, -9.76000295e+34, 2.74909177e+46],
                            [-5.35306600e+01, -1.87656166e+13,  7.01221838e+23, 6.53931850e+34, -2.61044651e+46],
                            [-1.60851290e+02, -5.71266391e+13,  9.60290753e+24, -3.19549121e+36, 3.57602189e+47],
                            [-1.73850769e+02, -2.94419358e+13, -1.12872827e+25, 7.56900235e+36, -1.59290696e+48],
                            [1.22572998e+02,  5.19273113e+13,  2.29197332e+25, -3.15231146e+36, 5.05927434e+47],
                            [2.53310703e+02, -1.72917001e+13, -2.90183539e+24, 6.03448733e+35, -2.08045943e+47],
                            [1.93042722e+02,  2.93865104e+13, -7.83450510e+24, 2.85987037e+36, 1.06859961e+47],
                            [-7.89151248e+01, -1.70346384e+12, -9.92887361e+22, 1.55110695e+34, -6.97470322e+45],
                            [2.21855523e+02,  1.63667575e+13, -1.49735803e+24,3.21407760e+35, -5.15588250e+46],
                            [-3.63226930e+02, -7.17344692e+13,  2.81668784e+24, 2.69030552e+35, 1.23856688e+47],
                            [-1.47566720e+02,  9.75444278e+12, -1.25586343e+24, -3.36486532e+35, 9.16714768e+46],
                            [-2.00630449e+00,  9.67546422e+10, -1.92162811e+22, -3.00284174e+33, -3.17729672e+44],
                            [4.56440424e+01,  4.01272196e+12, -2.90928549e+23, 5.26677024e+34, -1.91329128e+46],
                            [-3.39545909e+02, -2.13625641e+13,  7.29914638e+23, -1.66138839e+35, -6.85428210e+46],
                            [6.39076539e+01,  3.22023603e+13, -1.91237068e+25, -9.31131030e+36, -4.34591791e+48],
                            [8.84353516e+01, -3.83118456e+13,  1.23003766e+25, -2.72156532e+36, -1.47213665e+48],
                            [1.48966842e+02,  2.05946146e+12, -8.28193137e+23, 5.19555829e+35, 1.25904277e+47],
                            [1.28530908e+02,  1.53032188e+13, -5.38898632e+23,-3.13085341e+34, 2.07427824e+43],
                            [1.72239311e+02, -2.06348294e+12, -4.01514666e+23, 1.35668378e+35, -2.03607306e+46],
                            [-9.56874156e+01,  1.22012654e+13,  4.60548536e+23, 9.46514847e+33, 3.73108287e+45],
                            [-1.03701562e+02, -1.20963692e+13,  1.95234324e+24, 2.69054159e+34, -3.90490145e+45],
                            [-3.89130623e+02,  6.00400186e+13,  2.32834012e+25, -5.95159005e+36, -1.71947165e+48],
                            [-5.83108503e+01, -1.25456587e+13, -3.47402272e+24, 5.89019642e+35, -4.95732963e+46],
                            [3.83027507e+02, -3.21133581e+12, -1.02148569e+23, 2.70445826e+34, 3.95315656e+45]]

    assert np.allclose(np.array(predictions).all(), np.array(expected_predictions).all())


